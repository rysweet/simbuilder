[project]
name = "simbuilder"
version = "0.1.0"
description = "SimBuilder - Azure tenant discovery and simulation management platform"
authors = [{name = "SimBuilder Team", email = "team@simbuilder.dev"}]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "typer>=0.9.0",
    "neo4j>=5.15.0",
    "nats-py>=2.6.0",
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "loguru>=0.7.2",
    "rich>=13.7.0",
    "python-liquid>=1.9,<2.0",
    "pyyaml>=6.0.2",
    "openai>=1.20,<2.0",
    "tenacity>=8,<9",
    "fastapi>=0.115.0",
    "python-jose[cryptography]>=3.3,<4.0",
    "gitpython>=3.1.43",
    "uvicorn>=0.30.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "black>=23.10.0",
    "pre-commit>=3.5.0",
    "mdformat>=0.7.17",
    "types-python-jose>=3.5.0.20250531",
    "pytest-mock>=3.12.0",
    "respx>=0.20.0",
]

[project.scripts]
tenant-discovery = "tenant_discovery.cli:app"
tdcli = "tenant_discovery.cli:app"
simbuilder-api = "simbuilder_api.cli:app"
simbuilder-specs = "simbuilder_specs.cli:app"
simbuilder-graph = "simbuilder_graph.cli:app"
simbuilder-llm = "simbuilder_llm.cli:app"
simbuilder-servicebus = "simbuilder_servicebus.cli:app"
scaffolding = "scaffolding.cli:main"
simbuilder = "scaffolding.cli:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

[tool.poetry]
name = "simbuilder"
version = "0.1.0"
description = "SimBuilder - Azure tenant discovery and simulation management platform"
authors = ["SimBuilder Team <team@simbuilder.dev>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
typer = "^0.9.0"
neo4j = "^5.15.0"
nats-py = "^2.6.0"
python-dotenv = "^1.0.0"
structlog = "^23.2.0"
loguru = "^0.7.2"
rich = "^13.7.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
ruff = "^0.1.6"
mypy = "^1.7.0"
black = "^23.10.0"
pre-commit = "^3.5.0"
mdformat = "^0.7.17"

[tool.poetry.scripts]
tenant-discovery = "tenant_discovery.cli:app"
tdcli = "tenant_discovery.cli:app"
simbuilder-api = "simbuilder_api.cli:app"
simbuilder-specs = "simbuilder_specs.cli:app"
simbuilder-graph = "simbuilder_graph.cli:app"
simbuilder-llm = "simbuilder_llm.cli:app"
simbuilder-servicebus = "simbuilder_servicebus.cli:app"
scaffolding = "scaffolding.cli:main"
simbuilder = "scaffolding.cli:main"

[tool.ruff]
target-version = "py312"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.black]
target-version = ['py312']
line-length = 100

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "neo4j.*",
    "nats.*",
    "loguru.*",
    "openai.*",
    "liquid.*",
    "tenacity.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "mypy>=1.16.0",
    "ruff>=0.11.13",
    "types-python-jose>=3.5.0.20250531",
]
